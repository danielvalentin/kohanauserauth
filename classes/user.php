<?php defined('SYSPATH') or die('No direct script access.');abstract class user {		public static function path($to = false)	{		$userconfig = Kohana::$config->load('kohanauserauth.urls');		$base = arr::get($userconfig, 'base','users');		if(!$to)		{			return $base;		}		return $base.'/'.arr::get($userconfig, $to,'');	}		public static function set_last_url($url)	{		Session::instance()->set('last_url', $url);	}		public static function note($type, $note)	{		$session = Session::instance();		$popnotes = $session->get('usernotes');		if(!$popnotes)		{			$popnotes = array();		}		$content = Array('type' => $type, 'note' => $note);		$popnotes[] = $content;		$session->set('usernotes', $popnotes);	}		public static function getnotes()	{		$session = Session::instance();		$messages = $session->get('usernotes');		$session->delete('usernotes');		if(isset($messages) && !empty($messages))		{			return $messages;		}		return false;	}		public static function get_last_url($delete = true)	{		$url = Session::instance()->get('last_url', false);		if($delete)		{			Session::instance()->delete('last_url');		}		return $url;	}		public static function require_login()	{		if(!self::logged())		{			self::set_last_url(Request::factory()->referrer());			self::redirect('login');		}	}		public static function create($data)	{		$user = ORM::factory('User');		$user->create_user($data, array(			'name',			'password',			'email'		));		$user->add_role('login');	}		public static function randompass($passlength = 8)	{		$characters = "abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789";		$pass = array();		$length = strlen($characters)-1;		for ($i=0;$i<$passlength;$i++)		{		    $n = rand(0, $length);		    $pass[] = $characters[$n];		}		return implode($pass);	}		public static function redirect($to = '', $code = 302)	{		HTTP::redirect(self::path($to), $code);		die();	}		public static function logged($role = null)	{		return Auth_ORM::instance()->logged_in($role);	}		public static function get()	{		return Auth_ORM::instance()->get_user();	}		public static function force_login($user)	{		return Auth_ORM::instance()->force_login($user);	}		public static function login($username, $password, $remember = false)	{		return Auth_ORM::instance()->login($username, $password, $remember);	}		public static function logout()	{		return Auth_ORM::instance()->logout();	}	}